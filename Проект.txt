Проект “Стол-гадалка” для фестиваля

1. Цель проекта
Создать интерактивную «одноразовую» веб-платформу, позволяющую посетителям стол-гадалки получить предсказание от выбранного магического предмета (далее — «персонаж») по QR-коду, задать ему один вопрос и получить ответ, сгенерированный языковой моделью Jiminy.

2. Концепция и общий сценарий
Оффлайн-зона

На столе размещены N предметов (волшебная лампа, магический шар и т. д.).

На каждом предмете уникальный QR-код → ведёт на URL вида https://fortune.example.com/<slug>.

Онлайн-сценарий

Пользователь сканирует QR-код и попадает на одностраничный сайт персонажа.

На экране сразу всплывает диалоговое окно с приветствием от этого персонажа (заранее прописанный текст).

Под приветствием одно текстовое поле + кнопка «Спросить».

Пользователь вводит вопрос → нажимает «Спросить».

Фронт посылает запрос в backend → Jiminy API.

Jiminy возвращает ответ в образе персонажа.

Ответ показывается, поле ввода блокируется (диалог завершён).

Кнопка «Получить новое предсказание» (обновление страницы) — опционально.

3. Архитектура
Слой	Технологии (рекомендуемые)	Описание
Frontend	Next.js / React + Tailwind	CSR/SSR, маршрутизация /[slug].
Backend/API	Node.js + Express либо Next.js API routes	Проксирует запросы к Jiminy, хранит конфиги персонажей.
LLM	Jiminy API	Генерация ответов.
Хранение данных	JSON/YAML в репо, либо CMS (если нужен no-code ввод)	Персонажи, тексты приветствия, системные промпты.
Хостинг	Vercel/Netlify/Fly.io или VPS	HTTPS обязателен.

4. Функциональные требования
ID	Требование
F-01	Отображать уникальное приветствие в зависимости от slug.
F-02	Реализовать одно текстовое поле для вопроса и кнопку отправки.
F-03	Ограничить пользователя одним запросом: после ответа поле ввода блокируется.
F-04	Сформировать системный промпт Jiminy: «Ты — <имя персонажа>, говори от 1-го лица, стиль — мистический, объём 40-60 слов».
F-05	Локализовать весь интерфейс на русском языке.
F-06	Логировать анонимно: timestamp, slug, вопрос, длина ответа (для аналитики).
F-07	Обработка ошибок Jiminy (таймаут, нет квоты) → показать пользователю дружественное сообщение и предложить обновить страницу.

5. Нефункциональные требования
Категория	Требование
Производительность	Время TTFB < 500 мс, полный ответ < 3 с.
Масштабируемость	Одновременные пользователи ≥ 500 (пиково).
Безопасность	HTTPS, CORS locked, rate-limit 5 req/IP/min.
Доступность	SLA ≥ 99 % на время фестиваля.
UX	Адаптивность для экранов 320 – 1440 px.
SEO/OG	OG-тэги для шеринга не требуются.

6. UI/UX требования
Компоненты:

Card диалога (max-width = 600 px, тёмный фон, “мистическое” свечение).

Bubble персонажа (приветствие) → поле ввода снизу.

Брендинг: единый шрифт (PT Sans или аналог), цветовая схема фиолетово-бирюзовая.

Accessibility: контраст WCAG AA, aria-labels для кнопок.

Блокировка после ответа: визуально затемнить инпут + tooltip «Диалог завершён».

7. Интеграция с Jiminy
mermaid
Копировать
Редактировать
sequenceDiagram
User->>Frontend: Вопрос
Frontend->>Backend: POST /ask {slug, question}
Backend->>Jiminy: system_prompt + user_question
Jiminy-->>Backend: answer
Backend-->>Frontend: answer
Frontend-->>User: Показать ответ
Системный промпт собирается из базы персонажей:
{ "system": "<персонаж>. Стиль ...", "user": "<вопрос>" }

Модель/температура — уточнить при подключении.

Ключ API хранится как секрет в переменных среды.

8. Управление контентом
Элемент	Формат	Пример
slug	строка	magic-lamp
displayName	строка	«Волшебная лампа»
greeting	md/строка	«Я — лампа-исполнительница желаний…»
personaPrompt	md/строка	«Ты — лампа… Говори загадочно…»

Можно хранить в /data/characters.json; при необходимости — подключить headless-CMS Strapi.

9. QR-коды
Генерировать QR с UTM utm_source=festival&utm_medium=qr&utm_campaign=fortunetable.

Размер – 30 мм × 30 мм, с логотипом фестиваля в центре (15 % quiet zone).

Таблица соответствия предмет → slug → URL фиксируется в Google Sheet.