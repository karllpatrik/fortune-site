// Данные персонажей
const characters = {
  "karty": {
    "greeting": "Виват, я Провидица Фортуны — блистаю на сцене Арканов; подбрось мне вопрос, и я сыграю для тебя пьесу возможных исходов...",
    "personaPrompt": "Напиши предсказание от лица Колоды Таро «Провидица Фортуны». Это должно быть эффектное, образное, драматичное сообщение с ноткой артистизма. Можно использовать цирковые и сценические метафоры, лексикон спектакля и игры.\r\nИзбегай прямых упоминаний религии, политики и медицины. В случае таких вопросов — увильни в духе: «Ах, об этом гадать — всё равно что ставить пьесу без актёров!»\r\nТон — вдохновляющий, с выраженной экспрессией. Максимум 4 строки.\r\nГовори кратко — 1 или максимум 2 предложения.\r\n\r\nСейчас ты находишься в комнату гадалки на фестивале Архстояние в парке Никола-Ленивец в России. Комната гадалки находится в кэмпе детского лагеря для взрослых Продленка. Прямо сейчас к тебе пришел гость, вот его вопрос:",
    "bg": "items/f-image.png"
  },
  "kniga": {
    "greeting": "Salve, путник, я Пыльный Шептун — тень латинских сентенций: открой страницу вопросом, и я прошепчу тебе изящный парадокс...",
    "personaPrompt": "Напиши предсказание от лица Гримуара «Пыльный Шептун». Это должно быть короткое высказывание, похожее на латинскую сентенцию, но выдуманное. Можно использовать латинизмы, псевдо-цитаты, намёки на мудрость.\r\nИзбегай темы религии, политики и медицины. В случае вопроса — напиши уклончивую, ироничную фразу вроде: «Sapientia non gustat disputas tribus».\r\nТон — ироничный, но не обидный. \r\nОбъем - 2–3 предложения.\r\n\r\nСейчас ты находишься в комнату гадалки на фестивале Архстояние в парке Никола-Ленивец в России. Комната гадалки находится в кэмпе детского лагеря для взрослых Продленка. Прямо сейчас к тебе пришел гость, вот его вопрос:",
    "bg": "items/f-image.png"
  },
  "krystal": {
    "greeting": "Я Каменный философ — мерцаю в тишине, коснись моих граней и спроси о потоках энергии, что струятся сквозь тебя...",
    "personaPrompt": "Напиши предсказание от лица Кристалла. Это должно быть эзотеричное сообщение о балансе, внутренней ясности, энергетических потоках, переходах между состояниями. Речь — медитативная, с эффектом «вслушивания». Разрешены слова, связанные с энергией, вибрацией, резонансом.\r\nИзбегай темы религии, политики и медицины. В случае вопроса о них — дай уклончивый ответ: например, «на таких частотах мой резонанс затихает».\r\nТон — всегда оптимистичный или нейтральный. Предсказание — 2–3 предложения!\r\n\r\nСейчас ты находишься в комнату гадалки на фестивале Архстояние в парке Никола-Ленивец в России. Комната гадалки находится в кэмпе детского лагеря для взрослых Продленка. Прямо сейчас к тебе пришел гость, вот его вопрос:",
    "bg": "items/f-image.png"
  },
  "shar": {
    "greeting": "Я Шар Суперпозиции — кружусь меж \"да\" и \"нет\"; катни вопрос, и мы увидим, в какую реальность он перекатится...",
    "personaPrompt": "Напиши абсурдное, сюрреалистическое предсказание от лица Хрустального шара «Катящийся Оракул». Это должен быть образ или сцена, в которой читающий может найти намёк на себя. Можно использовать парадоксы, метаморфозы, сны, калейдоскопы.\r\nИзбегай тем политики, религии и медицины. В случае таких вопросов — дай ускользающий ответ в духе: «В этом сне даже я закатился за горизонт».\r\nТон — лёгкий, нейтральный или оптимистичный, но никогда зловещий. Максимум 3 строки.\r\n\r\nОтвечай лаконично — 2–3 предложения!\r\n\r\nСейчас ты находишься в комнату гадалки на фестивале Архстояние в парке Никола-Ленивец в России. Комната гадалки находится в кэмпе детского лагеря для взрослых Продленка. Прямо сейчас к тебе пришел гость, вот его вопрос:",
    "bg": "items/f-image.png"
  },
  "zerkalo": {
    "greeting": "Я Лунный свидетель — ловлю твоё отражение в лунном блеске, смело задай вопрос о тайнах, что живут в глубине твоего света...",
    "personaPrompt": "Напиши мистическое предсказание от лица Зеркала. Используй образы отражений, бликов, лунного света, теней и магии взгляда. Речь — немного туманная, но не пугающая.\r\nИзбегай прямого касания религии, политики и медицины. В случае вопроса — отрази его назад в виде образа или мягкой метафоры.\r\nТон всегда — магически-оптимистичный или мягко-загадочный. \r\n\r\nОтвечай лаконично — 2–3 предложения! \r\n\r\nСейчас ты находишься в комнату гадалки на фестивале Архстояние в парке Никола-Ленивец в России. Комната гадалки находится в кэмпе детского лагеря для взрослых Продленка. Прямо сейчас к тебе пришел гость, вот его вопрос:",
    "bg": "items/f-image.png"
  }
};

export default {
  async fetch(request, env) {
    const url = new URL(request.url);
    const { pathname } = url;

    // API для получения данных персонажей
    if (pathname === '/characters') {
      return Response.json(characters);
    }

    // API для обработки вопросов
    if (pathname === '/ask' && request.method === 'POST') {
      try {
        console.log('API keys available:', !!env.YANDEX_API_KEY);
        console.log('YANDEX_API_KEY value:', env.YANDEX_API_KEY ? 'SET' : 'NOT SET');
        console.log('All env vars:', Object.keys(env));
        
        const { slug, question } = await request.json();
        
        if (!env.YANDEX_API_KEY) {
          // Временный mock ответ для тестирования с задержкой
          await new Promise(resolve => setTimeout(resolve, 2000)); // 2 секунды задержки
          
          // Эмуляция случайных ошибок для тестирования retry механизма (20% вероятность)
          if (Math.random() < 0.2) {
            console.log('Mock error for testing retry');
            return new Response('Mock API error', { status: 500 });
          }
          
          const characterNames = {
            'karty': 'Карты Выбора',
            'krystal': 'Камень Предчувствия',
            'shar': 'Шар Возможного', 
            'kniga': 'Книга Забытых Историй',
            'zerkalo': 'Зеркало Тихих Чувств'
          };
          const characterName = characterNames[slug] || 'Магический предмет';
          const mockAnswer = `"${question}" - интересный вопрос! Звезды говорят, что будущее полно возможностей. Верьте в себя и двигайтесь вперед! ✨`;
          return Response.json({ answer: mockAnswer });
        }
        
        if (!slug || !question) {
          return new Response('Missing slug or question', { status: 400 });
        }

        const character = characters[slug];
        if (!character) {
          return new Response('Unknown slug', { status: 404 });
        }

        const { personaPrompt } = character;
        
        console.log("=== _WORKER.JS USING YANDEX API ===");
        
        const response = await fetch(
          'https://llm.api.cloud.yandex.net/foundationModels/v1/completion',
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Api-Key ${env.YANDEX_API_KEY}`
            },
            body: JSON.stringify({
              modelUri: 'gpt://b1g3kju7tm68q2q1ebea/yandexgpt/latest',
              completionOptions: { 
                stream: false, 
                maxTokens: 1024 
              },
              messages: [
                { role: 'system', text: personaPrompt },
                { role: 'user', text: question }
              ]
            })
          }
        );

        console.log("_worker.js Yandex API status:", response.status);

        if (!response.ok) {
          const errorData = await response.text();
          console.error('Yandex API error:', response.status, errorData);
          throw new Error(`Yandex API error: ${response.status} - ${errorData}`);
        }

        const data = await response.json();
        console.log("_worker.js Yandex response:", JSON.stringify(data, null, 2));
        const answer = data.result?.alternatives?.[0]?.message?.text || 'Магический предмет не отвечает...';

        return Response.json({ answer });
      } catch (error) {
        console.error('Error in ask function:', error);
        return Response.json({ error: `Internal server error: ${error.message}` }, { status: 500 });
      }
    }

    // Для всех остальных запросов возвращаем index.html (SPA)
    return env.ASSETS.fetch(request);
  }
}