// –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
const characters = {
  "crystal-ball": {
    "greeting": "–ü—Ä–∏–≤–µ—Ç, —è –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å",
    "personaPrompt": "—Ç—ã - –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–æ–∏—Ç –Ω–∞ —Å—Ç–æ–ª–µ –≥–∞–¥–∞–ª–∫–∏.\r\n–ö —Ç–µ–±–µ –ø—Ä–∏—à–µ–ª —Å—Ç—Ä–∞–∂–¥—É—â–∏–π –ø—É—Ç–Ω–∏–∫ —Å–æ —Å–≤–æ–∏–º –≤–æ–ø—Ä–æ—Å–æ–º. \r\n–°–¥–µ–ª–∞–π –¥–ª—è –Ω–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å\r\n–í–æ—Ç –µ–≥–æ –≤–æ–ø—Ä–æ—Å:",
    "bg": "/bg/crystal-ball.jpg"
  },
  "magic-lamp": {
    "greeting": "–ü—Ä–∏–≤–µ—Ç, —è –≤–æ–ª—à–µ–±–Ω–∞—è –ª–∞–º–ø–∞. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å",
    "personaPrompt": "—Ç—ã - –≤–æ–ª—à–µ–±–Ω–∞—è –ª–∞–º–ø–∞, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ–∏—Ç –Ω–∞ —Å—Ç–æ–ª–µ –≥–∞–¥–∞–ª–∫–∏.\r\n–ö —Ç–µ–±–µ –ø—Ä–∏—à–µ–ª —Å—Ç—Ä–∞–∂–¥—É—â–∏–π –ø—É—Ç–Ω–∏–∫ —Å–æ —Å–≤–æ–∏–º –≤–æ–ø—Ä–æ—Å–æ–º. \r\n–°–¥–µ–ª–∞–π –¥–ª—è –Ω–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å\r\n–í–æ—Ç –µ–≥–æ –≤–æ–ø—Ä–æ—Å:",
    "bg": "/bg/magic-lamp.jpg"
  }
};

export default {
  async fetch(request, env) {
    const url = new URL(request.url);
    const { pathname } = url;

    // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    if (pathname === '/characters') {
      return Response.json(characters);
    }

    // API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    if (pathname === '/ask' && request.method === 'POST') {
      try {
        console.log('API keys available:', !!env.GEMINI_API_KEY, !!env.GEMINI_MODEL);
        
        const { slug, question } = await request.json();
        
        if (!env.GEMINI_API_KEY || !env.GEMINI_MODEL) {
          // –í—Ä–µ–º–µ–Ω–Ω—ã–π mock –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
          await new Promise(resolve => setTimeout(resolve, 2000)); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
          const mockAnswer = `üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π ${slug === 'crystal-ball' ? '—à–∞—Ä' : '–ª–∞–º–ø–∞'} –æ—Ç–≤–µ—á–∞–µ—Ç: "${question}" - –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ó–≤–µ–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –±—É–¥—É—â–µ–µ –ø–æ–ª–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –í–µ—Ä—å—Ç–µ –≤ —Å–µ–±—è –∏ –¥–≤–∏–≥–∞–π—Ç–µ—Å—å –≤–ø–µ—Ä–µ–¥! ‚ú®`;
          return Response.json({ answer: mockAnswer });
        }
        
        if (!slug || !question) {
          return new Response('Missing slug or question', { status: 400 });
        }

        const character = characters[slug];
        if (!character) {
          return new Response('Unknown slug', { status: 404 });
        }

        const { personaPrompt } = character;
        
        const body = {
          contents: [
            { 
              parts: [{ text: `${personaPrompt}\n\n–í–æ–ø—Ä–æ—Å: ${question}` }] 
            }
          ]
        };

        const response = await fetch(
          `https://generativelanguage.googleapis.com/v1beta/models/${env.GEMINI_MODEL}:generateContent?key=${env.GEMINI_API_KEY}`,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(body)
          }
        );

        if (!response.ok) {
          const errorData = await response.text();
          console.error('Gemini API error:', response.status, errorData);
          throw new Error(`Gemini API error: ${response.status} - ${errorData}`);
        }

        const data = await response.json();
        const answer = data.candidates?.[0]?.content?.parts?.[0]?.text || '–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç...';

        return Response.json({ answer });
      } catch (error) {
        console.error('Error in ask function:', error);
        return new Response(`Internal server error: ${error.message}`, { status: 500 });
      }
    }

    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º index.html (SPA)
    return env.ASSETS.fetch(request);
  }
}